<?xml version="1.0" encoding="UTF-8"?>
<project default="test"
         name="jitsi-meet-torture"
         xmlns:maven-artifact="antlib:org.apache.maven.artifact.ant">

    <property name="src" value="src/main/java" />
    <property name="src.test" value="src/test/java" />
    <property name="dest" value="classes"/>
    <property name="test.reports.dir" value="test-reports"/>
    <property name="test.html.reports.dir" value="${test.reports.dir}/html"/>

    <path id="maven-ant-tasks.classpath"
          path="resources/lib/maven-ant-tasks-2.1.3.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="maven-ant-tasks.classpath" />

    <maven-artifact:dependencies pathId="compile.class.path" useScope="compile">
        <pom file="pom.xml" />
    </maven-artifact:dependencies>
    <maven-artifact:dependencies filesetId="runtime.fileset"
                                 pathId="runtime.classpath" useScope="runtime">
        <pom file="pom.xml" />
    </maven-artifact:dependencies>

    <path id="project.class.path">
        <path refid="runtime.classpath" />
        <pathelement location="${dest}"/>
    </path>

    <!-- windows specific properties -->
    <condition property="is.running.windows" value="${os.name}">
        <os family="windows"/>
    </condition>
    <condition property="lib.native.path" value="lib/native/windows">
        <isset property="is.running.windows"/>
    </condition>

    <!-- linux specific properties -->
    <condition property="is.running.linux" value="${os.name}">
        <equals arg1="${os.name}" arg2="linux"
                casesensitive="false" trim="true"/>
    </condition>
    <condition property="lib.native.path" value="lib/native/linux-64">
        <and>
            <equals
                arg1="${os.name}"
                arg2="linux"
                casesensitive="false"
                trim="true"/>
            <os arch="amd64" />
        </and>
    </condition>
    <condition property="lib.native.path" value="lib/native/linux">
        <and>
            <equals
                arg1="${os.name}"
                arg2="linux"
                casesensitive="false"
                trim="true"/>
            <os arch="i386" />
        </and>
    </condition>

    <!-- macosx specific properties -->
    <condition property="is.running.macosx" value="${os.name}">
        <os family="mac"/>
    </condition>
    <condition property="lib.native.path" value="lib/native/macosx">
        <isset property="is.running.macosx"/>
    </condition>

    <!-- webdriver binary property -->
    <condition property="webdriver.chrome.driver"
               value="${lib.native.path}/chromedriver">
        <or>
            <isset property="is.running.macosx"/>
            <isset property="is.running.linux"/>
        </or>
    </condition>
    <condition property="webdriver.chrome.driver"
               value="${lib.native.path}/chromedriver.exe">
            <isset property="is.running.windows"/>
    </condition>
    <condition property="webdriver.gecko.driver"
               value="${lib.native.path}/geckodriver">
        <or>
            <isset property="is.running.macosx"/>
            <isset property="is.running.linux"/>
        </or>
    </condition>
    <condition property="webdriver.gecko.driver"
               value="${lib.native.path}/geckodriver.exe">
        <isset property="is.running.windows"/>
    </condition>
    <condition property="webdriver.ie.driver"
               value="${lib.native.path}/IEDriverServer.exe">
            <isset property="is.running.windows"/>
    </condition>

    <property environment="env"/>

    <target name="check-psnr-file">
        <available file="resources/psnr/psnr-input.y4m" property="psnrFileExists"/>
    </target>

    <target name="set-psnr-file" depends="check-psnr-file" if="psnrFileExists">
        <property name="psnrFilePath" value="resources/psnr/psnr-input.y4m"/>
    </target>

    <maven-artifact:dependencies pathId="dependency.ant.contrib.classpath">
        <dependency groupId="ant-contrib"
                    artifactId="ant-contrib"
                    version="1.0b3"/>
    </maven-artifact:dependencies>

    <taskdef resource="net/sf/antcontrib/antlib.xml"
             classpathref="dependency.ant.contrib.classpath"/>

    <!--<property name="jitsi-meet.instance.url"-->
              <!--value="https://meet.example.com"/>-->

    <!-- default target -->
    <target name="test" depends="compile,clean-test-reports,check-linux-env,set-psnr-file">
        <!-- Fail if we have't setup what to test -->
        <fail unless="jitsi-meet.instance.url"
              message="Please setup the property jitsi-meet.instance.url
with the address of the instance to test (add to the command line
-Djitsi-meet.instance.url=&quot;https://meet.example.com&quot;"/>

        <!-- if the property is not set we use the param all, to run all -->
        <condition property="jitsi-meet.tests.toRun" value="all">
            <not>
                <isset property="jitsi-meet.tests.toRun"/>
            </not>
        </condition>

        <!-- Get all properties available to pass them to ant -->
        <propertyset id="test.sysproperties" negate="true"/>

        <!-- the name of tests-result-file -->
        <property name="test.result.filename"
                  value="TEST-org.jitsi.meet.test.TestsRunner"/>

        <!-- checks whether we have used custom filenames for the test result-->
        <condition property="test.result.modify">
            <not>
                <matches string="${test.result.filename}" pattern="^TEST-.*$"/>
            </not>
        </condition>

        <!-- set the psnrFilePath to an empty string if a PSNR file does not exist-->
        <condition property="psnrFilePath" value="">
            <not>
                <isset property="psnrFilePath"/>
            </not>
        </condition>

        <junit printsummary="yes"
               fork="yes"
               haltonfailure="no"
               showoutput="yes"
               failureproperty="testing.failed">
            <classpath refid="project.class.path"/>
            <formatter type="xml"/>
            <sysproperty key="webdriver.chrome.driver"
                         value="${webdriver.chrome.driver}"/>
            <sysproperty key="jitsi-meet.fakeStreamVideoFile"
                         value="${psnrFilePath}"/>
            <!--
            For IE 11 only, you will need to set a registry entry on the target computer so that the driver can
            maintain a connection to the instance of Internet Explorer it creates. For 32-bit Windows installations,
            the key you must examine in the registry editor is
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BFCACHE.
            For 64-bit Windows installations, the key is
            HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BFCACHE.
            Please note that the FEATURE_BFCACHE subkey may or may not be present, and should be created if it is
            not present. Important: Inside this key, create a DWORD value named iexplore.exe with the value of 0.

            Also add the tested site to trusted sites in internet options.
            -->
            <sysproperty key="webdriver.ie.driver"
                         value="${webdriver.ie.driver}"/>
            <syspropertyset refid="test.sysproperties"/>

            <!-- Comma separated list of tests to run relative to the
            org.jitsi.meet.test package. Executed in the same order as
            ordered in the property. -->
            <sysproperty key="jitsi-meet.tests.toRun"
                         value="${jitsi-meet.tests.toRun}"/>

            <!-- The main test suite which will add all tests -->
            <test name="org.jitsi.meet.test.TestsRunner"
                  todir="${test.reports.dir}"
                  outfile="${test.result.filename}"/>
            <!-- this is xml formatter -->
            <formatter classname="org.jitsi.meet.test.FailureListener"
                usefile="false"/>
        </junit>

        <antcall target="add-filename-info-to-test-results"/>

        <antcall target="generate-html-reports"/>

        <!-- Check whether testing went alright and fail if not.-->
        <fail if="testing.failed"/>
    </target>

    <!-- If we have used custom filename for the test result process
        result xmls and add the filename as a class name so we can see it in
        the html reports -->
    <target name="add-filename-info-to-test-results"
            if="test.result.modify">
        <foreach param="test-res-file"
                 target="-add-filename-info-to-test-results-perfile"
                 inheritall="true" inheritrefs="true">
            <path>
                <fileset dir="${test.reports.dir}">
                    <include name="*.xml"/>
                    <exclude name="TEST-*"/>
                    <exclude name="html"/>
                    <exclude name="html-sources"/>
                </fileset>
            </path>
        </foreach>

    </target>
    <!-- Replaces in a test result xml the parameter to be its
        class name, by default all tests are under TestsRunner -->
    <target name="-add-filename-info-to-test-results-perfile">

        <basename property="test-res-file-noext" file="${test-res-file}"
                  suffix=".xml"/>

        <replace file="${test-res-file}"
                 token="name=&quot;org.jitsi.meet.test.TestsRunner&quot;"
                value="name=&quot;org.jitsi.meet.test.${test-res-file-noext}&quot;"/>
    </target>

    <!-- Separates generating html reports in own target so we are able to
     to disable them -->
    <target name="generate-html-reports"
            unless="jitsi-meet.disable.htmlreports">
        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${test.html.reports.dir}"/>
        </junitreport>
    </target>

    <!-- compiles project -->
    <target name="compile" depends="init">
        <javac classpathref="compile.class.path"
               debug="true"
               deprecation="true" destdir="${dest}"
               nowarn="false"
               includeantruntime="false"
               source="1.8" target="1.8"
               fork="true">
            <src path="${src}"/>
            <src path="${src.test}"/>
            <include name="**/*.java" />
        </javac>
    </target>

    <target name="init">
        <mkdir dir="${dest}"/>
    </target>

    <!-- clean -->
    <target name="clean"
        description="Remove all generated files and prepare for a clean build.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${dest}"/>
        </delete>
    </target>

    <!-- internal target - removes the current set of test reports, so
         residual data is not left to confuse a cached browser -->
    <target name="clean-test-reports"
            unless="jitsi-meet.disable.clean.reports">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${test.reports.dir}"/>
        </delete>
        <mkdir dir="${test.reports.dir}"/>
    </target>

    <target name="check-linux-env" if="is.running.linux">
        <fail unless="env.DISPLAY">No DISPLAY environment variable.
Its seems you are running headless linux and have no DISPLAY set.
Make sure you start xvfb:
$ Xvfb :1 -screen 5 1024x768x8 &amp;
$ export DISPLAY=:1.5
        </fail>
    </target>

</project>
